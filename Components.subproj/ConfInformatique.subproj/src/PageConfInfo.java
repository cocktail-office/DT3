// Generated by the WOLips Templateengine Plug-in at 18 janv. 2007 09:43:07

import java.net.MalformedURLException;

import org.apache.xmlrpc.XmlRpcException;
import org.cocktail.dt.server.metier.EOIndividu;
import org.cocktail.dt.server.ws.glpi.A_GLPIObject;
import org.cocktail.dt.server.ws.glpi.GLPIComputer;
import org.cocktail.fwkcktlwebapp.common.util.StringCtrl;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.foundation.NSArray;

/**
 * Configuration du matos informatique d'un individu. Les donnees sont recuperee
 * depuis l'entite <code>ImpParc</code>.
 * 
 * 
 * @author Cyril Tarade <cyril.tarade at univ-lr.fr>
 */

public class PageConfInfo extends DTWebPage {

	/**
	 * Le binding indiquant la personne pour qui on veut savoir la conf info
	 */
	public EOIndividu eoIndividu;

	/**
	 * 
	 */
	public NSArray<GLPIComputer> glpiComputerArray;

	/**
	 * Un element du display group
	 */
	public GLPIComputer glpiComputerItem;

	/**
	 * 
	 */
	public boolean isAfficherTous = false;

	/**
	 * 
	 */
	public String errMessage;

	public PageConfInfo(WOContext context) {
		super(context);
	}

	/**
	 * Surcharge du setter afin de savoir s'il faut recharger ou non le display
	 * group
	 * 
	 * @param value
	 * @throws XmlRpcException
	 * @throws MalformedURLException
	 */
	public NSArray<GLPIComputer> getGlpiComputerArray() {
		if (glpiComputerArray == null) {
			errMessage = StringCtrl.emptyString();
			if (eoIndividu != null) {
				try {
					if (isAfficherTous) {
						glpiComputerArray = GLPIComputer.getGLPIComputersForEOIndividu(eoIndividu);
					} else {
						glpiComputerArray = GLPIComputer.getCurrentGLPIComputersForEOIndividu(eoIndividu);
					}
				} catch (Throwable e) {
					e.printStackTrace();
					errMessage = e.getMessage();
				}
			}
		}
		return glpiComputerArray;
	}

	/**
	 * Forcer la réinterrogation de GLPI pour les machines
	 * 
	 * @return
	 */
	public WOComponent doRefresh() {
		glpiComputerArray = null;
		return null;
	}

	/**
	 * Forcer la réinterrogation de GLPI pour les machines et pour l'ensemble des
	 * constantes (localisation, os ...)
	 * 
	 * @return
	 */
	public WOComponent doRefreshAll() {
		glpiComputerArray = null;
		A_GLPIObject.resetAllCache();
		return null;
	}

	/**
	 * Si l'individu change, on force le rechargement
	 * 
	 * @param eoIndividu
	 */
	public final void setEoIndividu(EOIndividu value) {
		EOIndividu prevEoIndividu = eoIndividu;
		eoIndividu = value;
		if (prevEoIndividu != eoIndividu) {
			doRefresh();
		}
	}

	/**
	 * 
	 * @param isAfficherTous
	 */
	public final void setAfficherTous(boolean value) {
		boolean prevIsAfficherTous = isAfficherTous;
		isAfficherTous = value;
		if (prevIsAfficherTous != isAfficherTous) {
			doRefresh();
		}
	}
}