// Generated by the WOLips Templateengine Plug-in at 6 sept. 2007 16:31:07

import org.cocktail.dt.server.components.swap.I_Swap;
import org.cocktail.dt.server.metier.EOActivites;
import org.cocktail.dt.server.metier.EOVActivites;
import org.cocktail.fwkcktlwebapp.common.util.StringCtrl;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOGlobalID;
import com.webobjects.foundation.NSArray;

/**
 * Ecran de gestion des activites (libelles, SAM, prestation, swap associe,
 * ....)
 * 
 * @author ctarade
 */

public class PageActiviteActivites
		extends A_AdministrationPageActivite {

	/** ACT_ORDRE de l'activite en cours d'edition (read-only) */
	public Number codeActivite;
	/** libelle */
	public String libelleActivite;
	/** email pour SAM */
	public String emailActivite;
	/** code de l'article PIE associe */
	public Number caarId;

	/** les informations supplementaires */
	public String commentActivite;
	/** coche activite affichable */
	public boolean isActiviteAffichable;

	/** si la def. de l'activite est heritee, le nom du papa */
	public String libelleActiviteHeritee;

	/** l'enregistrement en cours de traitement */
	private EOVActivites recActivite;

	/** l'enregistrement pere (cas de l'heritage) */
	private EOVActivites recParentActivite;

	/**
	 * indique si les parametre de l'activite sont "locales" (a contrario
	 * heritees)
	 */
	public boolean isLocalPrefDef;

	public PageActiviteActivites(WOContext context) {
		super(context);
	}

	// actions

	/**
	 * Valider le formuler et faire les actions correspondantes
	 */
	public WOComponent ok() {
		if (valider()) {
			if (confirmSave()) {
				return goSwapActivite();
			} else {
				return null;
			}
		}
		return null;
	}

	/**
	 * Retourner a la page de gestion des activites. On effectue la selection du
	 * service ajoute si besoin.
	 */
	private WOComponent goSwapActivite() {
		if (curMode == MODE_AJOUT && recActivite != null) {
			// forcer le refresh de la liste des activites du service
			swapActiviteCaller.setServiceSelected(null);
			swapActiviteCaller.setServiceSelectedCStructure(
					recActivite.stringForKey("cStructure"));
			// TODO selectionner l'activite dans l'arbre
			swapActiviteCaller.activiteListener.selectActiviteByActOrdre(
					recActivite.numberForKey("actOrdre"));
		} else if (curMode == MODE_MODIF) {
			// mise a jour : on recharger l'objet
			EOEditingContext ec = recActivite.editingContext();
			ec.invalidateObjectsWithGlobalIDs(new NSArray<EOGlobalID>(ec.globalIDForObject(recActivite)));
		}
		return dtSession().getSavedPageWithName(PageAdministration.class.getName());
	}

	/**
	 * Annuler la saisie
	 */
	public WOComponent annuler() {
		return goSwapActivite();
	}

	/**
	 * Change la vue de la definition de creation des demandes vers la definition
	 * locale.
	 */
	public WOComponent doChangeToLocalPref() {
		isLocalPrefDef = true;
		fillComponent();
		return null;
	}

	/**
	 * Change la vue de la definition de creation des demandes vers la definition
	 * herite d'une des activites "peres".
	 */
	public WOComponent doChangeToPerePref() {
		isLocalPrefDef = false;
		fillComponent();
		return null;
	}

	// methodes internes

	/**
	 * Valide la saisie des informations sur une activite.
	 */
	protected boolean valider() {
		errorMessage = StringCtrl.emptyString();
		// le libelle est obligatoire
		if (StringCtrl.isEmpty(libelleActivite)) {
			errorMessage = "Le libellé de l'activité doit être indiqué !";
			return false;
		}
		// tester si une autre activite n'a pas la meme adresse email associee
		if (!StringCtrl.isEmpty(emailActivite)) {
			Number actOrdreSameMail = activiteBus().findActiviteForMail(emailActivite, false);
			String cStructure = (recParentActivite != null ?
					recParentActivite.stringForKey("cStructure") :
					recActivite.stringForKey("cStructure"));
			if (actOrdreSameMail != null && (
					recActivite == null || actOrdreSameMail.intValue() != recActivite.actOrdre().intValue())) {
				errorMessage = "Il existe une activité avec l'adresse email \"" + emailActivite + "\"!\n" +
						activiteBus().findActivitePath(
								activiteBus().findActivite(
										actOrdreSameMail, cStructure)).valueForKey("actLibelle");
				return false;
			}
		}
		// pas d'erreur
		return true;
	}

	// appel externe

	/**
	 * Ajout d'une nouvelle activite fille de <code>parentRecord</code>. Les
	 * variables sont initialisee avec les valeurs par defaut dans un premier
	 * temps, puis on ecrase avec les definition heritees.
	 */
	public void initForAjout(SwapActivites caller, EOVActivites parentRecord) {
		curMode = MODE_AJOUT;
		recActivite = null;
		codeActivite = null;
		libelleActivite = StringCtrl.emptyString();
		emailActivite = StringCtrl.emptyString();
		caarId = null;
		libelleActiviteHeritee = StringCtrl.emptyString();
		swapSelected = I_Swap.NOUVELLE_ACTIVITE_SWAP_DEFAUT;
		commentActivite = StringCtrl.emptyString();
		isActiviteAffichable = true;
		isLocalPrefDef = false;
		recParentActivite = parentRecord;
		swapActiviteCaller = caller;
		fillComponent();
	}

	public void initForModif(EOVActivites record, EOVActivites parentRecord) {
		curMode = MODE_MODIF;
		recActivite = record;
		codeActivite = record.numberForKey("actOrdre");
		libelleActivite = record.stringForKey("actLibelle");
		emailActivite = record.stringForKey("actCreerMail");
		caarId = record.numberForKey("cartOrdre");
		isActiviteAffichable = recActivite.boolForKey("grpAffichable");
		isLocalPrefDef = (recActivite.intForKey("actOrdre") == recActivite.intForKey("actPref"));
		recParentActivite = parentRecord;
		fillComponent();
	}

	/**
	 * Effectue l'enregistrement dans la base.
	 * 
	 * @return <code>true</code> si pas d'erreur
	 */
	private boolean confirmSave() {
		errorMessage = StringCtrl.emptyString();
		if (curMode == MODE_AJOUT) {

			Number actPereOrdre = null;
			if (recParentActivite.actOrdre().intValue() < 0) {
				actPereOrdre = new Integer(0);
			} else {
				actPereOrdre = recParentActivite.actOrdre();
			}

			Integer transId = activiteBus().beginECTransaction();

			EOActivites newEoActivites = activiteBus().addActivite(transId, actPereOrdre,
					recParentActivite.cStructure(),
					StringCtrl.normalize(libelleActivite),
					StringCtrl.normalize(emailActivite), caarId);

			if (newEoActivites == null) {
				activiteBus().rollbackECTrancsacition(transId);
				errorMessage = "l'ajout d'une nouvelle activité a échoué ! (enregistrement) : " + activiteBus().getErrorMessage();
				return false;
			}

			if (!activiteBus().updateActivitePref(transId,
					newEoActivites, null, new Integer(swapList.indexOfIdenticalObject(swapSelected)),
					StringCtrl.normalize(commentActivite), isLocalPrefDef)) {
				activiteBus().rollbackECTrancsacition(transId);
				newEoActivites = null;
				errorMessage = "l'ajout d'une nouvelle activité a échoué ! (préferences) : " + activiteBus().getErrorMessage();
				return false;
			}

			if (!activiteBus().updateActiviteAffichable(transId,
					newEoActivites, null, isActiviteAffichable)) {
				activiteBus().rollbackECTrancsacition(transId);
				newEoActivites = null;
				errorMessage = "l'ajout d'une nouvelle activité a échoué ! (affichable) : " + activiteBus().getErrorMessage();
				return false;
			}

			// On recupere la reference vers l'editing context, pour qu'il
			// soit pas garbage-collecte avant commit
			activiteBus().commitECTransaction(transId);

			// Au finale, il faut garder la reference vers un objet VActivites
			recActivite = activiteBus().findVActivite(newEoActivites.actOrdre());

		} else if (curMode == MODE_MODIF) {

			Integer transId = activiteBus().beginECTransaction();
			if (!activiteBus().updateActivite(transId,
						recActivite.actOrdre(),
						StringCtrl.normalize(libelleActivite),
						StringCtrl.normalize(emailActivite), null, caarId)) {
				activiteBus().rollbackECTrancsacition(transId);
				errorMessage = "la modification de l'activité a échoué ! (enregistrement) : " + activiteBus().getErrorMessage();
				return false;
			}

			if (!activiteBus().updateActivitePref(transId, null,
						recActivite.numberForKey("actOrdre"),
						new Integer(swapList.indexOfIdenticalObject(swapSelected)),
						StringCtrl.normalize(commentActivite), isLocalPrefDef)) {
				activiteBus().rollbackECTrancsacition(transId);
				errorMessage = "la modification de l'activité a échoué ! (préferences) : " + activiteBus().getErrorMessage();
				return false;
			}

			if (!activiteBus().updateActiviteAffichable(transId,
					null, recActivite.actOrdre(), isActiviteAffichable)) {
				activiteBus().rollbackECTrancsacition(transId);
				errorMessage = "la modification de l'activité a échoué ! (affichable) : " + activiteBus().getErrorMessage();
				return false;
			}

			activiteBus().commitECTransaction(transId);
		}
		return StringCtrl.isEmpty(errorMessage);
	}

	/**
	 * Initialisation des variables suite au parametrage du composant, selon si
	 * c'est un ajout ou une modif, les donnees heritees ...
	 */
	private void fillComponent() {
		if (isLocalPrefDef) {
			// definition locale
			if (recActivite != null) {
				swapSelected = swapList.objectAtIndex(recActivite.toActPref().actSwapView().intValue());
				commentActivite = recActivite.toActPref().actSwapMessage();
			} else {
				swapSelected = swapList.objectAtIndex(recParentActivite.toActPref().actSwapView().intValue());
				commentActivite = recParentActivite.toActPref().actSwapMessage();
			}
		} else {
			// definition heritee
			if (recParentActivite != null) {
				libelleActiviteHeritee = recParentActivite.toActPref().actLibelle();
				swapSelected = swapList.objectAtIndex(recParentActivite.toActPref().actSwapView().intValue());
				commentActivite = recParentActivite.toActPref().actSwapMessage();
			} else {
				libelleActiviteHeritee = StringCtrl.emptyString();
				commentActivite = StringCtrl.emptyString();
			}
		}
	}

	// disponibilite des elements d'interface

	public boolean isDisabledComboSwap() {
		return !isLocalPrefDef;
	}

	public boolean isDisabledTextCommentActivite() {
		return !isLocalPrefDef;
	}
}