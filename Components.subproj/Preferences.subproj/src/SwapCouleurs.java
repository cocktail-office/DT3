// Generated by the WOLips TemplateEngine Plug-in at 13 oct. 2006 14:59:44

import org.cocktail.dt.server.metier.EOVActivites;
import org.cocktail.fwkcktlwebapp.common.database.CktlRecord;
import org.cocktail.fwkcktlwebapp.common.util.StringCtrl;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WODisplayGroup;
import com.webobjects.appserver.WOResponse;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;

/**
 * Gestion des couleurs des demandes selon le batiment du contact ou de
 * l'activite asssociee
 * 
 * @author Cyril TARADE <cyril.tarade at univ-lr.fr>
 */

public class SwapCouleurs extends PreferencesSwapView {

	// les couleurs en fonction des batiments
	public WODisplayGroup batimentDG;
	private NSArray batimentList;
	public CktlRecord batimentItem;
	public CktlRecord batimentSelected;

	// la liste des services visibles
	public NSArray serviceList;
	public CktlRecord serviceItem;
	public CktlRecord serviceSelected;
	private CktlRecord prevServiceSelected;

	// listener du composant des activites
	public PreferencesActiviteListener activiteListener;

	// le pt d'entree pour le listerner
	public CktlRecord recVActivite;

	// radio batiement - couleur
	public final String COUL_BATIMENT = "A";
	public final String COUL_ACTIVITE = "B";

	public SwapCouleurs(WOContext context) {
		super(context);
	}

	protected void initComponent() {
		// liste de tous les batiements
		batimentList = cBus().findAllBatiments();
		// selection du premier
		if (batimentList.count() > 0)
			batimentSelected = (CktlRecord) batimentList.objectAtIndex(0);
		batimentDG = new WODisplayGroup();
		batimentDG.setObjectArray(batimentList);
		batimentDG.setNumberOfObjectsPerBatch(10);
		// liste des services
		serviceList = (NSArray) pBus().findAllPrefDroits(dtUserInfo().noIndividu()).valueForKey("toStructureUlr");
		// selection de celui des prefs
		if (serviceList.count() > 0) {
			String prfDroService = pBus().getDefaultServiceCode(dtUserInfo().noIndividu());
			if (!StringCtrl.isEmpty(prfDroService))
				setServiceSelected(sBus().structureForCode(prfDroService));
			else
				setServiceSelected((CktlRecord) serviceList.objectAtIndex(0));
		}
	}

	/* -- CHOIX DE LA COULEUR A AFFICHER -- */

	public String couleurSelected() {
		if (dtUserInfo().useCoulBat())
			return COUL_BATIMENT;
		else
			return COUL_ACTIVITE;
	}

	public void setCouleurSelected(String value) {
		pBus().updatePrefAppli(null, dtUserInfo().noIndividu(), null, null, null,
				null, null, null, null, null, null, null, null,
				(value.equals(COUL_BATIMENT) ? Boolean.TRUE : Boolean.FALSE), null, null, null, null, null, null);
		dtSession().doReloadPreferences();
	}

	public boolean isCoulBatiment() {
		return couleurSelected().equals(COUL_BATIMENT);
	}

	/* -- BATIMENTS -- */

	public WOComponent selectBatiment() {
		batimentSelected = batimentItem;
		return null;
	}

	public String batimentItemColor() {
		return pBus().getHtmlColorForCode(batimentItem.stringForKey("cLocal"));
	}

	public String batimentSelectedColor() {
		return pBus().getHtmlColorForCode(batimentSelected.stringForKey("cLocal"));
	}

	// enregistrement des donnees via les setters

	public void setBatimentSelectedColor(String value) {
		if (value != null) {
			pBus().setColorForCode(pBus().htmlColorToNSColor(value), batimentSelected.stringForKey("cLocal"));
			pBus().updatePrefCouleurs(null, dtUserInfo().noIndividu());
		}
	}

	// le cache de l'activite en cours
	private CktlRecord currentActivite;

	//
	public String activiteSelectedColor;

	// la sequence doAfterActiviteSelectedItem() avec (activiteSelectedColor ==
	// null) puis setActiviteSelectedColor()
	// est un cas ou il faut ignorer l'appel au setter setActiviteSelectedColor()
	// dans les autres, tout doit se passer normalement
	private boolean activiteSelectedColorWasCalled;
	private boolean shouldIgnoreSetterActiviteSelectedColor;

	public void appendToResponse(WOResponse arg0, WOContext arg1) {
		// raz des temoins
		activiteSelectedColorWasCalled = false;
		shouldIgnoreSetterActiviteSelectedColor = false;
		super.appendToResponse(arg0, arg1);
	}

	/* -- GESTION DU BROWSER DES ACTIVITES -- */

	/**
	 * La classe listener de gestion du sous composant SelectActivite.
	 * 
	 * @author Cyril TARADE <cyril.tarade at univ-lr.fr>
	 */
	public class PreferencesActiviteListener extends SelectActiviteListener {

		public void doAfterActiviteSelectedItem() {
			// on memorise l'activite
			currentActivite = getActiviteSelectedItem().nodeRecord;
			// mettre a jour la couleur
			activiteSelectedColor = pBus().getHtmlColorForCode(currentActivite.numberForKey("actOrdre"));
			// verifier s'il faut ignorer le setter ou pas
			// cf la declaration de activiteSelectedColorWasCaller
			if (!activiteSelectedColorWasCalled && activiteSelectedColor == null)
				shouldIgnoreSetterActiviteSelectedColor = true;
		}

		protected CktlRecord recVActivite() {
			return recVActivite;
		}

		public Session session() {
			return dtSession();
		}

		public NSArray allNodes() {
			return session().activitesNodes();
		}

		public String formName() {
			return "formPreferences";
		}

		public void doAfterSearchActivite() {
		}

		public WOComponent caller() {
			return null;
		}

		public boolean shouldSelectedOnlyLeaf() {
			return true;
		}

		public boolean showHiddenActivite() {
			return dtUserInfo().hasDroit(DTUserInfo.DROIT_INTERVENANT_LIMITE, recVActivite().stringForKey("cStructure"));
		}

		/**
		 * c'est un intervenant qui accede a cet écran, on affiche les activités
		 * underscore
		 */
		public boolean showUnderscoredActivite() {
			return true;
		}

		@Override
		public boolean showActivitesFavoritesDemandeur() {
			// TODO Auto-generated method stub
			return true;
		}

		@Override
		public boolean showActivitesFavoritesIntervenant() {
			// TODO Auto-generated method stub
			return true;
		}

	}

	// override setter

	public void setServiceSelected(CktlRecord value) {
		prevServiceSelected = serviceSelected;
		serviceSelected = value;
		if (serviceSelected != null && (
				prevServiceSelected == null || (prevServiceSelected != null &&
						!serviceSelected.stringForKey("cStructure").equals(prevServiceSelected.stringForKey("cStructure"))))) {
			// refetcher l'activite d'entree du browser
			EOQualifier condition =
					DTDataBus.newCondition("cStructure='" + serviceSelected.stringForKey("cStructure") + "'");
			NSArray<EOVActivites> activitesForService = dtSession().dataBus().fetchArray(
					EOVActivites.ENTITY_NAME, condition, null);
			// selection de la premiere activite
			if (activitesForService.count() > 0) {
				recVActivite = (CktlRecord) activitesForService.objectAtIndex(0);
			}
			// reinstancier le listener
			activiteListener = new PreferencesActiviteListener();
		}
	}

	// enregistrement des donnees via les setters

	public void setActiviteSelectedColor(String value) {
		activiteSelectedColorWasCalled = true;
		if (!shouldIgnoreSetterActiviteSelectedColor && currentActivite != null && value != null) {
			activiteSelectedColor = value;
			pBus().setColorForCode(pBus().htmlColorToNSColor(activiteSelectedColor),
					currentActivite.numberForKey("actOrdre"));
			pBus().updatePrefCouleurs(null, dtUserInfo().noIndividu());
		}
	}

	/* == les bus de donnees == */

	private DTContactsBus cBus() {
		return dtSession().dataCenter().contactsBus();
	}

	public DTServiceBus sBus() {
		return dtSession().dataCenter().serviceBus();
	}

}